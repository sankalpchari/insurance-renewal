import InsuranceDetails from "../models/insuranceDetails.model.js";
import InsuranceProvider from "../models/InsuranceProvider.model.js";
import DoctorDetails from "../models/doctors.model.js";
import sequelize, { where } from "sequelize";
import { raw } from "mysql2";

export const getInsuranceDetails = async (req, res) => {
    try {
        const currentDate = new Date();

        const insuranceDetails = await InsuranceDetails.findAll({
            include: [
                {
                    model: InsuranceProvider,
                    as: 'InsuranceProvider',
                    attributes: ['provider_name'],
                    required: true
                }
            ],
            attributes: {
                include: [
                    [sequelize.col('InsuranceProvider.provider_name'), 'provider_name'],
                    [sequelize.fn('DATE_FORMAT', sequelize.col('from_service_date'), '%Y-%m-%d'), 'from_service_date'],
                    [sequelize.fn('DATE_FORMAT', sequelize.col('to_service_date'), '%Y-%m-%d'), 'to_service_date']
                ]
            },
            order: [
                [
                    sequelize.literal(
                        `ABS(DATEDIFF(to_service_date, '${currentDate.toISOString().split('T')[0]}'))`
                    ),
                    'ASC'
                ]
            ],
            raw: true
        });

        return res.status(200).json({data:insuranceDetails,"message":"data fetched successfully"});
    } catch (e) {
        console.log(e);
        return res.status(500).json({
            message: "Failed to get insurance details",
        });
    }
};


export const createInsuranceDetails = async (req, res) => {
    try {
        const {
            provider_id,
            recipient_name,
            recipient_ma,
            doctor_id,
            prsrb_prov,
            pa,
            from_service_date,
            to_service_date,
            recipient_is,
            procedure_code,
            units,
            plan_of_care,
            number_of_days,
            max_per_day,
            max_per_day_unit,
            insurance_status,
            mmis_entry,
            rsn,
            procedure_val,
            comment_pa
        } = req.body;
            console.log("called")
        // Check for existing insurance details for this recipient with overlapping dates
        const existingDetails = await InsuranceDetails.findOne({
            where: {
                recipient_ma,
                to_service_date: {
                    [sequelize.Op.gte]: from_service_date // to_service_date is greater than or equal to new from_service_date
                },
                from_service_date: {
                    [sequelize.Op.lte]: to_service_date // from_service_date is less than or equal to new to_service_date
                },
                is_active: true // Only check for active contracts
            }
        });

        // If an existing entry is found, update it
        if (existingDetails) {
            // Update the old entry to set is_current_active to 0
            await InsuranceDetails.update(
                { is_active: false }, // Set the old entry to inactive
                { where: { ID: existingDetails.ID } }
            );
        }

        // Create a new insurance detail entry
        const newInsuranceDetail = await InsuranceDetails.create({
            provider_id,
            recipient_name,
            recipient_ma,
            doctor_id,
            prsrb_prov,
            pa,
            from_service_date,
            to_service_date,
            recipient_is,
            procedure_code,
            units:procedure_val,
            plan_of_care,
            number_of_days,
            max_per_day,
            max_per_day_unit,
            insurance_status,
            mmis_entry,
            rsn,
            comment_pa,
            is_active: true
        });

        return res.status(201).json({data:newInsuranceDetail, success:true});
    } catch (e) {
        console.log(e);
        return res.status(500).json({
            message: "Failed to create insurance details",
            success:false
        });
    }
};


export const deleteInsurance = async(req, res ,next)=>{
    try{
        const {id} = req.params
        const result = await InsuranceDetails.destroy({
            where: { ID: id }
        });

        if (result === 0) {
            return res.status(404).json({ message: 'Provider not found', success:false });
        }

         return res.status(200).json({ message: 'Insurance details deleted successfully', success:true });

    }catch(e){
        console.log(e);
        return res.status(500).json({
            message: "Failed to delete insurance details",
            success:false
        });
    };
}



export const singleInsuranceDetails = async(req, res)=>{
    try{

        const { id } =  req.params
        console.log(id,"id");
    
        const insuranceProvider = await InsuranceDetails.findOne({ 
            include: [{ model: InsuranceProvider, as: 'InsuranceProvider', required: true} ],
            attributes: {
                include: [
                    [sequelize.fn('DATE_FORMAT', sequelize.col('from_service_date'), '%Y-%m-%d'), 'from_service_date'],
                    [sequelize.fn('DATE_FORMAT', sequelize.col('to_service_date'), '%Y-%m-%d'), 'to_service_date']
                ]
            },
            where:{ ID:id },
            raw:true
        });

        if(Object.keys(insuranceProvider).length){
           return res.status(200).json({ message: 'Insurance Provider added successfully', data: insuranceProvider });
        }else{
            return res.status(204).json({ message: 'Insurance Provider added successfully', data: [] });
        }

    }catch(error){
        res.status(500).json({ message: 'Error fetching provider', error: error.message });
    }
}

